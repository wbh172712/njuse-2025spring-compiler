const int gc1 = 2, gc2 = 5, gc3 = 7;
int g1 = 3, g2 = 11, g3 = 13, g4 = 17;

int main() {
    /* 第一阶段：基础计算（8变量）*/
    int a1 = gc1 * 3 + g1;          // 9
    const int a2 = (g2 % 6) * gc2;  // 25
    int a3 = a1 * (8); // 9*(8)=72
    int a4 = (a2 + g3) / 4;         // 38/4=9
    const int a5 = a3 - g4;         // 55
    int a6 = (a5 % 128) + a1;       // 55+9=64
    int a7 = (gc2 * 3) - (a6 / 8);  // 15-8=7
    int a8 = -a7 * (g1 + gc1);      // -7 * 5=-35

    /* 第二阶段：复合计算（12变量）*/
    int b1 = a8 + g2 * 2;           // 35+22=57
    const int b2 = (b1 % 20) * 3;   // 17 * 3=51
    int b3 = b2 * 4 + 3;            // 204+3=207
    int b4 = (g3 *5) - (b3/7)       // 65-29=36
             + (a5%10)*2;           // 36+10=46
    const int b5 = b4 * gc1;        // 92
    int b6 = b5 * 2 + 31;           // 184+31=215
    int b7 = (b6%50 + gc3) %32 *3;  // (15+7)=22%32 * 3=66
    int b8 = b7 *8 -17;             // 528-17=511
    int b9 = b8/10 + a2%7;          // 51+4=55
    const int b10 = (b9 * 4)%97;    // 220%97=26

    /* 第三阶段：重新赋值计算（10变量）*/
    int c1 = b10*gc3 + (g4%6)*5;    // 182+25=207
    const int c2 = (c1%256)+1;      // 208
    int c3 = (c2 * 2 +1)/3;         // 417/3=139
    int c4 = (c3%50)*3 + g1 * 16;   // 39 * 3+48=165
    const int c5 = c4 + a8;         // 165+35=200
    int c6 = c5 * 8 -255;           // 1600-255=1345
    int c7 = (c6%100)*5 +26;        // 45 * 5+26=251
    int c8 = c7 * 5;                // 1255
    const int c9 = c8 - g2 * 2;     // 1255-22=1233
    int c10 = c9/(gc2%3 +2);        // 1233/3=411

    /* 第四阶段：最终聚合（6变量）*/
    const int d1 = (a1+b1+c1)%97;   // 9+57+207=273%97=82
    int d2 = 34 + (d1 * 4)%13;      // 34+3=37
    const int d3 = (c10%50)*3;      // 33
    int d4 = d2 * 7 + d3;           // 259+33=292
    d4 = d4 +256;                   // 548
    int d5 = d4 * 2 +3;             // 1096+3=1099
    const int d6 = (d5%1000)*2;     // 99 * 2=198

    // 最终结果验证
    return gc1 + gc2 + gc3 + g1 + g2 + g3 + g4
           + a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8
           + b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8 + b9 + b10
           + c1 + c2 + c3 + c4 + c5 + c6 + c7 + c8 + c9 + c10
           + d1 + d2 + d3 + d4 + d5 + d6;
}